schema {
  query: Query
}

type Brand implements Node {
  id: ID!
  name: String!
  displayName: String!
  image: String!
  modelSet(before: String, after: String, first: Int, last: Int): ModelConnection!
  phoneunlockSet(before: String, after: String, first: Int, last: Int, brand: ID, device: ID, network: ID): PhoneUnlockConnection!
}

type BrandConnection {
  pageInfo: PageInfo!
  edges: [BrandEdge]!
}

type BrandEdge {
  node: Brand
  cursor: String!
}

scalar Decimal

type Model implements Node {
  id: ID!
  brand: Brand!
  name: String!
  displayName: String!
  image: String!
  phoneunlockSet(before: String, after: String, first: Int, last: Int, brand: ID, device: ID, network: ID): PhoneUnlockConnection!
}

type ModelConnection {
  pageInfo: PageInfo!
  edges: [ModelEdge]!
}

type ModelEdge {
  node: Model
  cursor: String!
}

type Network implements Node {
  id: ID!
  name: String!
  networknameSet(before: String, after: String, first: Int, last: Int): NetworkNameConnection!
  phoneunlockSet(before: String, after: String, first: Int, last: Int, brand: ID, device: ID, network: ID): PhoneUnlockConnection!
}

type NetworkConnection {
  pageInfo: PageInfo!
  edges: [NetworkEdge]!
}

type NetworkEdge {
  node: Network
  cursor: String!
}

type NetworkName implements Node {
  id: ID!
  network: Network!
  name: String!
  displayName: String!
  image: String!
}

type NetworkNameConnection {
  pageInfo: PageInfo!
  edges: [NetworkNameEdge]!
}

type NetworkNameEdge {
  node: NetworkName
  cursor: String!
}

interface Node {
  id: ID!
}

type OriginalFormat implements Node {
  id: ID!
  name: String!
  image: String
  singularName: String!
  originalformatextraSet(before: String, after: String, first: Int, last: Int): OriginalFormatTierExtraConnection!
  groupName(count: Int): String
  price(count: Int!): Decimal
}

type OriginalFormatConnection {
  pageInfo: PageInfo!
  edges: [OriginalFormatEdge]!
}

type OriginalFormatEdge {
  node: OriginalFormat
  cursor: String!
}

type OriginalFormatTierExtra implements Node {
  id: ID!
  originalFormat: OriginalFormat!
  name: String!
  image: String
  price: Float!
}

type OriginalFormatTierExtraConnection {
  pageInfo: PageInfo!
  edges: [OriginalFormatTierExtraEdge]!
}

type OriginalFormatTierExtraEdge {
  node: OriginalFormatTierExtra
  cursor: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PhoneUnlock implements Node {
  id: ID!
  brand: Brand!
  network: Network!
  device: Model
  price: Float!
  time: String!
  title(network: ID!): String
  data(imei: String!): String
  sig(imei: String!, network: ID!): String
}

type PhoneUnlockConnection {
  pageInfo: PageInfo!
  edges: [PhoneUnlockEdge]!
}

type PhoneUnlockEdge {
  node: PhoneUnlock
  cursor: String!
}

type Query {
  originalFormats(before: String, after: String, first: Int, last: Int): OriginalFormatConnection
  networks(before: String, after: String, first: Int, last: Int, name: String): NetworkConnection
  brands(before: String, after: String, first: Int, last: Int, name: String): BrandConnection
  phoneUnlock(before: String, after: String, first: Int, last: Int, brand: ID, device: ID, network: ID): PhoneUnlockConnection
  node(id: ID!): Node
}
